Grammar

PROGRAM -> begin STATEMENTLIST end
STATEMENTLIST -> { IFWHILE STATEMENTLIST }
STATEMENTLIST -> STATEMENT; { STATEMENT; }
IFWHILE -> if CONDITIONAL_STATEMENT then PROGRAM end
IFWHILE -> while CONDITIONAL_STATEMENT PROGRAM end
IFWHILE -> lambda
STATEMENT -> ASSIGNMENT
STATEMENT -> read(ID_LIST)
STATEMENT -> write(EXPRLIST)
STATEMENT -> IDENT
ASSIGNMENT -> IDENT := EXPRESSION
ID_LIST -> EXPRESSION { , EXPRESSION }
EXPRESSION -> T0
EXPRESSION -> not T0
T0 -> T1 { or T1 }
T1 -> F1 { and F1 }
F1 -> E1 R
R -> RELATION_OP E1
R -> lambda
E1 -> E2
E1 -> - E2
E2 -> T2 { + T2 }
T2 -> T3 { - T3 }
T3 -> F2 { * F2 }
F2 -> F3 { / F3 }
F3 -> PRIMARY { % PRIMARY }
PRIMARY -> (EXPRESSION)
PRIMARY -> - (EXPRESSION)
PRIMARY -> IDENT
PRIMARY -> int
PRIMARY -> bool
IDENT -> id
IDENT -> BOOLLITERAL
IDENT -> INTLITERAL
IDENT -> (EXPRESSION)